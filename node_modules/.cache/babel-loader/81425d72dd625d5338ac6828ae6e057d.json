{"ast":null,"code":"var _jsxFileName = \"/Users/benjamin/Desktop/roulette/src/components/Roulette.jsx\",\n    _s = $RefreshSig$();\n\n/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst Roulette = () => {\n  _s();\n\n  let rouletteAmount = 136;\n  let rouletteBoxes = [];\n  const [timer, setTimer] = useState(10);\n  const [transform, setTransform] = useState(null);\n  const [transformTime, setTransformTime] = useState(\"10s\"); // Timer with cleanup\n\n  useEffect(() => {\n    if (transform === null) {\n      const timer = setInterval(() => {\n        setTransformTime(\"8s\");\n        setTimer(prevState => {\n          if (prevState === 1) {\n            let randomNumber = Math.floor(Math.random() * (rouletteAmount * 100) - 7000) + 9000;\n            console.log(randomNumber);\n            setTransform(randomNumber);\n          }\n\n          return prevState - 1;\n        });\n      }, 1000); // clearing interval\n\n      return () => clearInterval(timer);\n    }\n  });\n\n  function finishedSpinning() {\n    setTimeout(() => {\n      setTransform(null);\n      setTimer(10);\n      setTransformTime(\"0s\");\n    }, 2000);\n  }\n\n  const styles = {\n    rouletteWrapper: css`\n      width: 100%;\n      overflow: hidden;\n      position: relative;\n      &::after {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 5px;\n        height: 100%;\n        background-color: blue;\n        opacity: 80%;\n      }\n    `,\n    info: css`\n      display: flex;\n      justify-content: space-between;\n      font-size: 25px;\n      margin-bottom: 0.5rem;\n    `,\n    rouletteBoxesContainer: css`\n      display: flex;\n      transition: all ${transformTime};\n      transform: translateX(${`-${transform}px`});\n    `,\n    box: css`\n      min-width: 100px;\n      min-height: 100px;\n    `,\n    redBox: css`\n      background-color: red;\n    `,\n    blackBox: css`\n      background-color: black;\n    `,\n    greenBox: css`\n      background-color: green;\n    `\n  }; // Pushing boxes to array\n\n  function pushBox(color, key) {\n    rouletteBoxes = [...rouletteBoxes, _jsxDEV(\"div\", {\n      css: [styles.box, styles[color]]\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)];\n  } // Generating boxes\n\n\n  for (let i = 0; i < rouletteAmount; i++) {\n    if (i === 10) {\n      // Number even\n      pushBox(\"greenBox\", i);\n      i++;\n    } else if (i % 2 === 0) {\n      pushBox(\"redBox\", i);\n    } else {\n      // Number odd\n      pushBox(\"blackBox\", i);\n    }\n  }\n\n  return _jsxDEV(\"div\", {\n    css: styles.rouletteWrapper,\n    children: [_jsxDEV(\"div\", {\n      css: styles.info,\n      children: [_jsxDEV(\"p\", {\n        children: \"Balance = 100DKK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), timer > 0 && _jsxDEV(\"p\", {\n        children: [\"Spinning in \", timer, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 23\n      }, this), !timer > 0 && _jsxDEV(\"p\", {\n        children: \"Spinning now bro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), _jsxDEV(\"div\", {\n      onTransitionEnd: finishedSpinning,\n      css: styles.rouletteBoxesContainer,\n      children: rouletteBoxes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Roulette, \"fVnZUJVu7JuU9rfaw5Ux6XvidwM=\");\n\n_c = Roulette;\nexport default Roulette;\n\nvar _c;\n\n$RefreshReg$(_c, \"Roulette\");","map":{"version":3,"names":["css","useEffect","useState","Roulette","rouletteAmount","rouletteBoxes","timer","setTimer","transform","setTransform","transformTime","setTransformTime","setInterval","prevState","randomNumber","Math","floor","random","console","log","clearInterval","finishedSpinning","setTimeout","styles","rouletteWrapper","info","rouletteBoxesContainer","box","redBox","blackBox","greenBox","pushBox","color","key","i"],"sources":["/Users/benjamin/Desktop/roulette/src/components/Roulette.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\"\nimport { useEffect, useState } from \"react\"\n\nconst Roulette = () => {\n  let rouletteAmount = 136\n  let rouletteBoxes = []\n\n  const [timer, setTimer] = useState(10)\n  const [transform, setTransform] = useState(null)\n  const [transformTime, setTransformTime] = useState(\"10s\")\n\n  // Timer with cleanup\n  useEffect(() => {\n    if (transform === null) {\n      const timer = setInterval(() => {\n        setTransformTime(\"8s\")\n        setTimer((prevState) => {\n          if (prevState === 1) {\n            let randomNumber =\n              Math.floor(Math.random() * (rouletteAmount * 100) - 7000) + 9000\n            console.log(randomNumber)\n            setTransform(randomNumber)\n          }\n          return prevState - 1\n        })\n      }, 1000)\n      // clearing interval\n      return () => clearInterval(timer)\n    }\n  })\n\n  function finishedSpinning() {\n    setTimeout(() => {\n      setTransform(null)\n      setTimer(10)\n      setTransformTime(\"0s\")\n    }, 2000)\n  }\n\n  const styles = {\n    rouletteWrapper: css`\n      width: 100%;\n      overflow: hidden;\n      position: relative;\n      &::after {\n        content: \"\";\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 5px;\n        height: 100%;\n        background-color: blue;\n        opacity: 80%;\n      }\n    `,\n    info: css`\n      display: flex;\n      justify-content: space-between;\n      font-size: 25px;\n      margin-bottom: 0.5rem;\n    `,\n\n    rouletteBoxesContainer: css`\n      display: flex;\n      transition: all ${transformTime};\n      transform: translateX(${`-${transform}px`});\n    `,\n    box: css`\n      min-width: 100px;\n      min-height: 100px;\n    `,\n    redBox: css`\n      background-color: red;\n    `,\n    blackBox: css`\n      background-color: black;\n    `,\n    greenBox: css`\n      background-color: green;\n    `,\n  }\n\n  // Pushing boxes to array\n  function pushBox(color, key) {\n    rouletteBoxes = [\n      ...rouletteBoxes,\n      <div key={key} css={[styles.box, styles[color]]}></div>,\n    ]\n  }\n\n  // Generating boxes\n  for (let i = 0; i < rouletteAmount; i++) {\n    if (i === 10) {\n      // Number even\n      pushBox(\"greenBox\", i)\n      i++\n    } else if (i % 2 === 0) {\n      pushBox(\"redBox\", i)\n    } else {\n      // Number odd\n      pushBox(\"blackBox\", i)\n    }\n  }\n\n  return (\n    <div css={styles.rouletteWrapper}>\n      <div css={styles.info}>\n        <p>Balance = 100DKK</p>\n        {timer > 0 && <p>Spinning in {timer} seconds</p>}\n        {!timer > 0 && <p>Spinning now bro</p>}\n      </div>\n      <div\n        onTransitionEnd={finishedSpinning}\n        css={styles.rouletteBoxesContainer}\n      >\n        {rouletteBoxes}\n      </div>\n    </div>\n  )\n}\n\nexport default Roulette\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}