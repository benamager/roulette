{"ast":null,"code":"var _jsxFileName = \"/Users/benjamin/Desktop/roulette/src/components/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport Btn from \"../components/Btn\";\nimport { nanoid } from \"nanoid\";\nimport { useEffect, useState } from \"react\";\n/** @jsxImportSource @emotion/react */\n\nimport { css } from \"@emotion/react\";\nimport { jsxDEV as _jsxDEV } from \"@emotion/react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    fields,\n    btnTxt\n  } = _ref;\n  const style = css`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    gap: 1rem;\n    & input {\n      font-size: 1.5rem;\n      padding: 1.5rem 0.75rem;\n      background-color: #d9d9d9;\n      border: none;\n      color: #000000;\n      &:focus {\n        outline: none;\n      }\n    }\n  `; // Generating state dynammicly\n\n  let generatedStateObject = {};\n  fields.forEach(field => {\n    generatedStateObject = { ...generatedStateObject,\n      [field.name]: \"\"\n    };\n  });\n  const [formData, setFormData] = useState(generatedStateObject); // On change\n\n  function handleChange(event) {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setFormData(prevFormData => {\n      return { ...prevFormData,\n        [name]: type === \"checkbox\" ? checked : value\n      };\n    });\n  } // Just logging everytime formData changes hehehe\n\n\n  useEffect(() => {\n    console.log(formData);\n  }, [formData]);\n  return _jsxDEV(\"form\", {\n    css: style,\n    action: \"\",\n    children: [fields.map(field => _jsxDEV(\"input\", {\n      type: field.type,\n      placeholder: field.placeholder,\n      name: field.name\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)), _jsxDEV(Btn, {\n      text: btnTxt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"ZBkXMUiNaDdeGsEmGUDEQzDQS7I=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["Btn","nanoid","useEffect","useState","css","Form","fields","btnTxt","style","generatedStateObject","forEach","field","name","formData","setFormData","handleChange","event","value","type","checked","target","prevFormData","console","log","map","placeholder"],"sources":["/Users/benjamin/Desktop/roulette/src/components/Form.jsx"],"sourcesContent":["import Btn from \"../components/Btn\"\nimport { nanoid } from \"nanoid\"\nimport { useEffect, useState } from \"react\"\n\n/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\"\n\nconst Form = ({ fields, btnTxt }) => {\n  const style = css`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    gap: 1rem;\n    & input {\n      font-size: 1.5rem;\n      padding: 1.5rem 0.75rem;\n      background-color: #d9d9d9;\n      border: none;\n      color: #000000;\n      &:focus {\n        outline: none;\n      }\n    }\n  `\n\n  // Generating state dynammicly\n  let generatedStateObject = {}\n  fields.forEach((field) => {\n    generatedStateObject = { ...generatedStateObject, [field.name]: \"\" }\n  })\n  const [formData, setFormData] = useState(generatedStateObject)\n\n  // On change\n  function handleChange(event) {\n    const { name, value, type, checked } = event.target\n    setFormData((prevFormData) => {\n      return {\n        ...prevFormData,\n        [name]: type === \"checkbox\" ? checked : value,\n      }\n    })\n  }\n\n  // Just logging everytime formData changes hehehe\n  useEffect(() => {\n    console.log(formData)\n  }, [formData])\n\n  return (\n    <form css={style} action=\"\">\n      {fields.map((field) => (\n        <input\n          type={field.type}\n          placeholder={field.placeholder}\n          key={nanoid()}\n          name={field.name}\n        ></input>\n      ))}\n      <Btn text={btnTxt} />\n    </form>\n  )\n}\n\nexport default Form\n"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,mBAAhB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;;AACA,SAASC,GAAT,QAAoB,gBAApB;;;AAEA,MAAMC,IAAI,GAAG,QAAwB;EAAA;;EAAA,IAAvB;IAAEC,MAAF;IAAUC;EAAV,CAAuB;EACnC,MAAMC,KAAK,GAAGJ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAfE,CADmC,CAkBnC;;EACA,IAAIK,oBAAoB,GAAG,EAA3B;EACAH,MAAM,CAACI,OAAP,CAAgBC,KAAD,IAAW;IACxBF,oBAAoB,GAAG,EAAE,GAAGA,oBAAL;MAA2B,CAACE,KAAK,CAACC,IAAP,GAAc;IAAzC,CAAvB;EACD,CAFD;EAGA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACM,oBAAD,CAAxC,CAvBmC,CAyBnC;;EACA,SAASM,YAAT,CAAsBC,KAAtB,EAA6B;IAC3B,MAAM;MAAEJ,IAAF;MAAQK,KAAR;MAAeC,IAAf;MAAqBC;IAArB,IAAiCH,KAAK,CAACI,MAA7C;IACAN,WAAW,CAAEO,YAAD,IAAkB;MAC5B,OAAO,EACL,GAAGA,YADE;QAEL,CAACT,IAAD,GAAQM,IAAI,KAAK,UAAT,GAAsBC,OAAtB,GAAgCF;MAFnC,CAAP;IAID,CALU,CAAX;EAMD,CAlCkC,CAoCnC;;;EACAf,SAAS,CAAC,MAAM;IACdoB,OAAO,CAACC,GAAR,CAAYV,QAAZ;EACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;EAIA,OACE;IAAM,GAAG,EAAEL,KAAX;IAAkB,MAAM,EAAC,EAAzB;IAAA,WACGF,MAAM,CAACkB,GAAP,CAAYb,KAAD,IACV;MACE,IAAI,EAAEA,KAAK,CAACO,IADd;MAEE,WAAW,EAAEP,KAAK,CAACc,WAFrB;MAIE,IAAI,EAAEd,KAAK,CAACC;IAJd,GAGOX,MAAM,EAHb;MAAA;MAAA;MAAA;IAAA,QADD,CADH,EASE,QAAC,GAAD;MAAK,IAAI,EAAEM;IAAX;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAtDD;;GAAMF,I;;KAAAA,I;AAwDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}